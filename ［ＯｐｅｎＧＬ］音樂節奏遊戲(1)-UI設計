//該include或define的就在這裡一次定義完，之後的文章就不說明了
#include <cstdlib>
#include <cstdio>
#include <iostream>
#include <vector>
#include <GL/glut.h>
#include <math.h>
#include <windows.h>
#pragma comment(lib, "Winmm.lib")
#pragma warning(disable:4996)
#define ww 500
#define wh 650
#define NULL 0
#define PAUSE 1
#define STOP 2
#define UI_Up 3
#define UI_Down 4
#define UI_Left 5
#define UI_Right 6
#define GAME_Up 7
#define GAME_Down 8
#define GAME_Left 9
#define GAME_Right 10
using namespace std;
 
void init();
void buttom_UI();
void top_UI();
void Arrow_LIST();//List Obj
void mymouse(int btn, int state, int x, int y);//glutMouseFunc callback
void menu();
void dis();//glutDisplayFunc callback
void play();//遊戲程式碼
int pick(int x, int y);//確認點到什麼 
static float distance_y = 5;//符號每次下落的距離
static int time_counter = 0;//dis()執行次數
static int music_Sheet_counter = 0;//樂譜讀了幾列
static int press_button_counter = 0;//按鍵特效
static int frequence = 0;//調整讀取樂譜頻率
static int score = 0;//調整讀取樂譜頻率
static bool gameover = false;
static char text_Press_Stat[4][20] = { 0 };
int start = 0;//判斷是否進入遊戲
int play_music = 0;//music flag
int combo = 0;
bool f = false;//check combo
bool Press_Stat[4] = { false,false,false,false };//top down left right
struct color
{
    float r, g, b;
}arrow_Exterior_color = { 0.0,1.0,0.0 }, arrow_interior_color = { 0.0,0.0,0.0 };
struct arrow
{
    int x;
    int y;
    int list_Num;
};
vector<arrow> arrow_list;
vector<arrow>::iterator it;
void dis()
{
    glClear(GL_COLOR_BUFFER_BIT);//每次重畫前先清空
    top_UI();
    buttom_UI();
    glutSwapBuffers();
}
void init()
{
    glViewport(0, 0, ww, wh);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(0, ww, 0, wh);
    glMatrixMode(GL_MODELVIEW);
    glClearColor(0, 0, 0, 1);
    glClear(GL_COLOR_BUFFER_BIT);
    Arrow_LIST();
}
void Arrow_LIST()//List Obj
{
    //------------------------------------------------------------------------------------------------
    //|  UI介面的上下左右:                                                                           |
    //------------------------------------------------------------------------------------------------
    glNewList(UI_Up, GL_COMPILE);//上
                                 //外層
    glBegin(GL_POLYGON);
    glVertex2f(15, 0);
    glVertex2f(35, 0);
    glVertex2f(35, 20);
    glVertex2f(15, 20);
    glEnd();
    glBegin(GL_POLYGON);
    glVertex2f(50, 20);
    glVertex2f(25, 40);
    glVertex2f(0, 20);
    glEnd();
 
    //內層
    glPushMatrix();
    glTranslatef(25 - (25 * 0.9), 20 - (20 * 0.9), 0.0);
    glColor3f(arrow_interior_color.r, arrow_interior_color.g, arrow_interior_color.b);
    glBegin(GL_POLYGON);
    glVertex2f(15 * 0.9, 0 * 0.9);
    glVertex2f(35 * 0.9, 0 * 0.9);
    glVertex2f(35 * 0.9, 20 * 0.9 + 0.5);
    glVertex2f(15 * 0.9, 20 * 0.9 + 0.5);
    glEnd();
    glBegin(GL_POLYGON);
    glVertex2f(50 * 0.9, 20 * 0.9 + 0.5);
    glVertex2f(25 * 0.9, 40 * 0.9);
    glVertex2f(0 * 0.9, 20 * 0.9 + 0.5);
    glEnd();
    glPopMatrix();
 
    glEndList();
 
    glNewList(UI_Down, GL_COMPILE);//下
                                   //外層
    glBegin(GL_POLYGON);
    glVertex2f(15, 40);
    glVertex2f(35, 40);
    glVertex2f(35, 20);
    glVertex2f(15, 20);
    glEnd();
    glBegin(GL_POLYGON);
    glVertex2f(50, 20);
    glVertex2f(25, 0);
    glVertex2f(0, 20);
    glEnd();
    //內層
    glPushMatrix();
    glTranslatef(25 - (25 * 0.9), 20 - (20 * 0.9), 0.0);
    glColor3f(arrow_interior_color.r, arrow_interior_color.g, arrow_interior_color.b);
    glBegin(GL_POLYGON);
    glVertex2f(15 * 0.9, 40 * 0.9);
    glVertex2f(35 * 0.9, 40 * 0.9);
    glVertex2f(35 * 0.9, 20 * 0.9 - 1);
    glVertex2f(15 * 0.9, 20 * 0.9 - 1);
    glEnd();
    glBegin(GL_POLYGON);
    glVertex2f(50 * 0.9, 20 * 0.9 - 1);
    glVertex2f(25 * 0.9, 0 * 0.9);
    glVertex2f(0 * 0.9, 20 * 0.9 - 1);
    glEnd();
    glPopMatrix();
    glEndList();
 
    glNewList(UI_Right, GL_COMPILE);//右
    glBegin(GL_POLYGON);
    glVertex2f(0, 10);
    glVertex2f(0, 30);
    glVertex2f(20, 30);
    glVertex2f(20, 10);
    glEnd();
    glBegin(GL_POLYGON);
    glVertex2f(20, 40);
    glVertex2f(20, 0);
    glVertex2f(40, 20);
    glEnd();
    //內層
    glPushMatrix();
    glTranslatef(20 - (20 * 0.9), 20 - (20 * 0.9), 0.0);
    glColor3f(arrow_interior_color.r, arrow_interior_color.g, arrow_interior_color.b);
    glBegin(GL_POLYGON);
    glVertex2f(0 * 0.9, 10 * 0.9);
    glVertex2f(0 * 0.9, 30 * 0.9);
    glVertex2f(20 * 0.9 + 1, 30 * 0.9);
    glVertex2f(20 * 0.9 + 1, 10 * 0.9);
    glEnd();
    glBegin(GL_POLYGON);
    glVertex2f(20 * 0.9 + 1, 40 * 0.9);
    glVertex2f(20 * 0.9 + 1, 0 * 0.9);
    glVertex2f(40 * 0.9, 20 * 0.9);
    glEnd();
    glPopMatrix();
    glEndList();
 
    glNewList(UI_Left, GL_COMPILE);//左
    glBegin(GL_POLYGON);
    glVertex2f(40, 10);
    glVertex2f(40, 30);
    glVertex2f(20, 30);
    glVertex2f(20, 10);
    glEnd();
    glBegin(GL_POLYGON);
    glVertex2f(20, 40);
    glVertex2f(20, 0);
    glVertex2f(0, 20);
    glEnd();
 
    //內層
    glPushMatrix();
    glTranslatef(20 - (20 * 0.9), 20 - (20 * 0.9), 0.0);
    glColor3f(arrow_interior_color.r, arrow_interior_color.g, arrow_interior_color.b);
    glBegin(GL_POLYGON);
    glVertex2f(40 * 0.9, 10 * 0.9);
    glVertex2f(40 * 0.9, 30 * 0.9);
    glVertex2f(20 * 0.9 - 1, 30 * 0.9);
    glVertex2f(20 * 0.9 - 1, 10 * 0.9);
    glEnd();
    glBegin(GL_POLYGON);
    glVertex2f(20 * 0.9 - 1, 40 * 0.9);
    glVertex2f(20 * 0.9 - 1, 0 * 0.9);
    glVertex2f(0 * 0.9, 20 * 0.9);
    glEnd();
    glPopMatrix();
    glEndList();
 
    //------------------------------------------------------------------------------------------------
    //|  GAME介面的上下左右:                                                                         |
    //------------------------------------------------------------------------------------------------
    glNewList(GAME_Up, GL_COMPILE);//上
    glColor3f(0.0, 1.0, 0.0);
    //外層
    glBegin(GL_POLYGON);
    glVertex2f(15, 0);
    glVertex2f(35, 0);
    glVertex2f(35, 20);
    glVertex2f(15, 20);
    glEnd();
    glBegin(GL_POLYGON);
    glVertex2f(50, 20);
    glVertex2f(25, 40);
    glVertex2f(0, 20);
    glEnd();
    glEndList();
 
    glNewList(GAME_Down, GL_COMPILE);//下
    glColor3f(0.0, 1.0, 0.0);
    //外層
    glBegin(GL_POLYGON);
    glVertex2f(15, 40);
    glVertex2f(35, 40);
    glVertex2f(35, 20);
    glVertex2f(15, 20);
    glEnd();
    glBegin(GL_POLYGON);
    glVertex2f(50, 20);
    glVertex2f(25, 0);
    glVertex2f(0, 20);
    glEnd();
    glEndList();
 
    glNewList(GAME_Right, GL_COMPILE);//右
    glColor3f(0.0, 1.0, 0.0);
    glBegin(GL_POLYGON);
    glVertex2f(0, 10);
    glVertex2f(0, 30);
    glVertex2f(20, 30);
    glVertex2f(20, 10);
    glEnd();
    glBegin(GL_POLYGON);
    glVertex2f(20, 40);
    glVertex2f(20, 0);
    glVertex2f(40, 20);
    glEnd();
    glEndList();
 
    glNewList(GAME_Left, GL_COMPILE);//左
    glColor3f(0.0, 1.0, 0.0);
    glBegin(GL_POLYGON);
    glVertex2f(40, 10);
    glVertex2f(40, 30);
    glVertex2f(20, 30);
    glVertex2f(20, 10);
    glEnd();
    glBegin(GL_POLYGON);
    glVertex2f(20, 40);
    glVertex2f(20, 0);
    glVertex2f(0, 20);
    glEnd();
    glEndList();
}
void buttom_UI()
{
    //底部的視窗
    //線條寬度:5
    glColor3f(1.0f, 0.0f, 0.0f);
    glRecti(0, 0, 500, 70);
    glColor3f(0.0f, 0.0f, 0.0f);
    glRecti(5, 5, 495, 65);
    glColor3f(1.0f, 0.0f, 0.0f);
 
    //輔助線
    int shift = 0;
    for (int i = 1; i <= 4; ++i)
    {
        glBegin(GL_LINES);
        glColor3f(1.0, 0.0, 0.0);
        glVertex2i(100 + shift, 70);
        glVertex2i(100 + shift, 550);
        glEnd();
 
        //UI:上下左右
        glPushMatrix();
        glTranslatef(75 + shift, 20, 0.0);
            arrow_Exterior_color.r = 0.0;
            arrow_Exterior_color.g = 1.0;
            arrow_Exterior_color.b = 0.0;
            glColor3f(arrow_Exterior_color.r, arrow_Exterior_color.g, arrow_Exterior_color.b);
            glCallList(UI_Up + (i - 1));
        glPopMatrix();
        shift += 100;
    }
}
void top_UI()
{
    int shift = 0;
    char text_musicname[] = "MUSIC NAME: What Makes You Beautiful";
    char text_score[] = "SCORE:";
    char text_stop[] = "EXIT";
    char s[30] = { 0 };
    char c[30] = {0};
    //頂部的視窗
    //線條寬度:5
    glColor3f(1.0f, 1.0f, 1.0f);
    glRecti(0, 580, 500, 650);
    glColor3f(0.0f, 0.0f, 0.0f);
    glRecti(5, 585, 495, 645);
    //頂部功能選單
    //線條寬度:3
    glColor3f(1.0f, 1.0f, 1.0f);//底色:白色
    glRecti(422, 550, 500, 580);
    glColor3f(0.0f, 0.0f, 0.0f);//兩個功能選框
    glRecti(425, 553, 497, 580);
    //------------------------------------------------------------------------------------------------
    //|  頂部功能選單文字                                                                            |
    //------------------------------------------------------------------------------------------------
    glColor3f(1.0f, 1.0f, 1.0f);//白色
                                //MUSIC NAME
    shift = 0;
    for (int i = 0; i < strlen(text_musicname); ++i)
    {
        glRasterPos2i(100 + shift, 610);
        glutBitmapCharacter(GLUT_BITMAP_9_BY_15, text_musicname[i]);
        shift += glutBitmapWidth(GLUT_BITMAP_9_BY_15, text_musicname[i]);
    }
    //SCORE
    shift = 0;
    for (int i = 0; i < strlen(text_score); ++i)
    {
        glRasterPos2i(100 + shift, 590);
        glutBitmapCharacter(GLUT_BITMAP_9_BY_15, text_score[i]);
        shift += glutBitmapWidth(GLUT_BITMAP_9_BY_15, text_score[i]);
    }
    //EXIT	
    shift = 0;
    for (int i = 0; i < strlen(text_stop); ++i)
    {
        glRasterPos2i(445 + shift, 563);
        glutBitmapCharacter(GLUT_BITMAP_9_BY_15, text_stop[i]);
        shift += glutBitmapWidth(GLUT_BITMAP_9_BY_15, text_stop[i]);
    }
}
int main(int argc, char** argv)
{
    glutInit(&argc, argv);//初始化glut
    glutInitDisplayMode(GLUT_RGB | GLUT_DEPTH | GLUT_DOUBLE);
    glutInitWindowSize(ww, wh);
    glutInitWindowPosition(450, 0);
    glutCreateWindow("Music Dancing");
 
    init();
    glutDisplayFunc(dis);
	glutMainLoop();//glutMainLoop()會反覆執行是回呼函數的function
    return 0;
    
}
